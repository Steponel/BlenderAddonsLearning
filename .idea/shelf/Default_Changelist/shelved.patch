Index: scripting_series_darkfall/introduction_scripting.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># 原视频 1 2集\r\n# https://www.youtube.com/watch?v=cyt0O7saU4Q&list=PLFtLHTf5bnym_wk4DcYIMq1DkjqB7kDb-&index=1\r\n# https://www.youtube.com/watch?v=hF-cyH8Z7WQ&list=PLFtLHTf5bnym_wk4DcYIMq1DkjqB7kDb-&index=2\r\nimport bpy\r\n\r\n# https://wiki.blender.org/wiki/Process/Addons/Guidelines/metainfo#Script_Meta_Info\r\nbl_info = {\r\n    # 插件名\r\n    \"name\": \"Stepone's Addon\",\r\n    # 作者\r\n    \"author\": \"My Name\",\r\n    # 插件版本\r\n    \"version\": (1, 0),\r\n    # Blender版本\r\n    \"blender\": (2, 80, 0),\r\n    # 分类\r\n    \"location\": \"View3d > Tool\",\r\n    # 警告\r\n    \"warning\": \"\",\r\n    # 链接 Documentation\r\n    \"wiki_url\": \"https://space.bilibili.com/21077855\",\r\n    # 插件分类\r\n    \"category\": \"Add Mesh\",\r\n}\r\n\r\n\r\n# User Interface Layout\r\n# 设置一个继承bpy.types.Panel的类\r\nclass TestPanel(bpy.types.Panel):\r\n    # 面板标签\r\n    bl_label = \"Test Panel\"\r\n    # 自定义ID名\r\n    bl_idname = \"PT_TestPanel\"\r\n    # 面板空间类型\r\n    bl_space_type = \"VIEW_3D\"\r\n    # 面板区域类型\r\n    bl_region_type = 'UI'\r\n    # 分类\r\n    bl_category = 'my_bl_category'\r\n\r\n    # 绘制UI\r\n    def draw(self, context):\r\n        layout = self.layout\r\n\r\n        # https://docs.blender.org/api/current/info_best_practice.html#user-interface-layout\r\n        # Use row(), when you want more than one property in a single line.\r\n        # row = layout.row()\r\n        # row.prop()\r\n        # row.prop()\r\n        row = layout.row()\r\n\r\n        # 添加Label\r\n        # 插件中打开IconViewer可查看icon名称\r\n        row.label(text=\"Label\", icon='BLENDER')\r\n        # 换行\r\n        row = layout.row()\r\n        # 添加命令按钮\r\n        row.operator(\"mesh.primitive_cube_add\", text='AddCube', icon='CUBE')\r\n        row = layout.row()\r\n        row.operator(operator=\"object.text_add\", text=\"Add Text\", icon='TEXT')\r\n\r\n\r\n# 添加一个PanelA面板,附属在TestPanel\r\nclass PanelA(bpy.types.Panel):\r\n    bl_label = \"Scale\"\r\n    bl_idname = \"PT_PanelA\"\r\n    bl_space_type = \"VIEW_3D\"\r\n    bl_region_type = 'UI'\r\n    bl_category = 'my_bl_category'\r\n\r\n    # 设置为附属于PT_TestPanel（bl_idname）\r\n    bl_parent_id = 'PT_TestPanel'\r\n    # 默认关闭\r\n    bl_options = {'DEFAULT_CLOSED'}\r\n\r\n    def draw(self, context):\r\n        layout = self.layout\r\n        obj = bpy.context.object\r\n        row = layout.row()\r\n        row.label(\r\n            text=\"Select an option to scale your object.\",\r\n            icon='FONT_DATA')\r\n        row = layout.row()\r\n\r\n        # 添加操作符按钮\r\n        # bpy.ops.transform.resize()\r\n        row.operator(\"transform.resize\")\r\n        row = layout.row()\r\n\r\n        # 更改布局Y轴间隔\r\n        layout.scale_y = 2\r\n\r\n        # 公开一个RNA项并放入布局\r\n        col = layout.column()\r\n        # bpy.context.object.scale\r\n        col.prop(obj, \"scale\")\r\n\r\n        # 拓展：\r\n        # what is self\r\n        # https://docs.python.org/zh-cn/3.7/faq/programming.html?highlight=self#what-is-self\r\n        # DNA&RNA\r\n        # https://www.blendernation.com/2008/12/01/blender-dna-rna-and-backward-compatibility/\r\n        # DNA ：a long string with encoded types for the entire internal structure of Blender's data, saved in every .blend, and in every Blender binary.\r\n        #       一个长字符串，包含所有Blender内部数据结构的编码类型，保存在每个.blend文件，每个Blender二进制文件\r\n        # RNA：自动生成一个Python数据访问API（Py data-access API），并允许特性（Feature）“全部可以动画（everything animatable）”，\r\n        # 数据的自动按钮列表视图（auto-button-list-view of data），甚至处理依赖关系（dependencies）\r\n\r\n\r\n# 再添加一个PanelB面板,附属在TestPanel\r\nclass PanelB(bpy.types.Panel):\r\n    bl_label = \"Special\"\r\n    bl_idname = \"PT_PanelB\"\r\n    bl_space_type = \"VIEW_3D\"\r\n    bl_region_type = 'UI'\r\n    bl_category = 'my_bl_category'\r\n\r\n    # 设置为附属于PT_TestPanel（bl_idname）\r\n    bl_parent_id = 'PT_TestPanel'\r\n    # 默认关闭\r\n    bl_options = {'DEFAULT_CLOSED'}\r\n\r\n    def draw(self, context):\r\n        layout = self.layout\r\n        row = layout.row()\r\n        row.label(text=\"Select a Special Option\", icon='BOLD')\r\n\r\n        # bpy.ops.object.shade_smooth()\r\n        row.operator(\"object.shade_smooth\", icon='MOD_SMOOTH', text=\"Set Smooth Shading\")\r\n        # bpy.ops.object.subdivision_set()\r\n        row.operator(\"object.subdivision_set\")\r\n        # bpy.ops.object.modifier_add()\r\n        row.operator(\"object.modifier_add\")\r\n\r\n\r\n# 注册\r\ndef register():\r\n    bpy.utils.register_class(TestPanel)\r\n    bpy.utils.register_class(PanelA)\r\n    bpy.utils.register_class(PanelB)\r\n\r\n\r\n# 注销\r\ndef unregister():\r\n    bpy.utils.unregister_class(TestPanel)\r\n    bpy.utils.unregister_class(PanelA)\r\n    bpy.utils.unregister_class(PanelB)\r\n\r\n\r\n# 在此脚本运行时注册\r\nif __name__ == \"__main__\":\r\n    register()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripting_series_darkfall/introduction_scripting.py b/scripting_series_darkfall/introduction_scripting.py
--- a/scripting_series_darkfall/introduction_scripting.py	(revision 095dc436adf9619bf40b4baad64925e1b478a56f)
+++ b/scripting_series_darkfall/introduction_scripting.py	(date 1614706651799)
@@ -58,7 +58,7 @@
         row.operator("mesh.primitive_cube_add", text='AddCube', icon='CUBE')
         row = layout.row()
         row.operator(operator="object.text_add", text="Add Text", icon='TEXT')
-
+        row = layout.row()
 
 # 添加一个PanelA面板,附属在TestPanel
 class PanelA(bpy.types.Panel):
